#!/usr/bin/env bash

echo "Running cache test..."

BUILD_DIR=$1
CACHE_DIR=$2
BUILD_PACK_DIR=$(dirname $(dirname $0))

if [ ! -d "$BUILD_DIR" ]; then
  echo "Build directory [$BUILD_DIR] does not exist, creating"
  mkdir -p "$BUILD_DIR"
else
  echo "Build directory [$BUILD_DIR] exists"
fi

if [ ! -d "$CACHE_DIR" ]; then
  echo "Cache directory [$CACHE_DIR] does not exist, creating"
  mkdir -p "$CACHE_DIR"
else
  echo "Cache directory [$CACHE_DIR] exists"
fi

echo "The compile script is at [$0]"
echo "The build pack is situated at [$BUILD_PACK_DIR]"

echo "ls /tmp/buildpacks/cf-test-buildpack.git/"
ls -la /tmp/buildpacks/cf-test-buildpack.git/
echo "\n\n"
ls -la /tmp/buildpacks/cf-test-buildpack.git/bin/

echo "Moving to the cache dir..."
cd "$CACHE_DIR"
echo "Now in [$(pwd)]"

echo "Directory listing:"
ls -la

echo "Listing Build Pack Directory:"
ls -la /tmp/buildpacks

echo "Listing Build Pack Cache:"
ls -la "$BUILDPACK_CACHE"

echo "Listing Platform Config:"
cat "$PLATFORM_CONFIG"

echo "Listing Environment:"
env

echo "Listing script versions:"
python -V
ruby -v
perl -v

echo -e "\n\n"
java -version

cd ../
echo "Creating script to start a small Python Web server"
cat > "$BUILD_DIR/boot.rb" <<EOF
#!/usr/bin/env ruby
#
# Simple HTTP Server for accessing files in target director
#
require 'socket'

loc = ENV['VCAP_APP_HOST'] || "127.0.0.1"
port = ENV['VCAP_APP_PORT'] || "8080".to_i

server = TCPServer.new(loc, port)

while (session = server.accept)
    session.gets
    session.print "HTTP/1.1 200/OK\rContent-type: text/html\r\n\r\n"
    session.print <<HTML
<html>
    <head></head>
    <body>
    Hello, World!
    </body>
</html>
HTML
    session.close
end

EOF

